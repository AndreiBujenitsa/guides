h1. git checkout

h2. file and branch name is same

Let's say that I have a file called lab and I have a branch called lab. In the following case which operation will be performed.

<pre>
git co lab
</pre>

<pre>
git co -- lab # this will act on file named lab
git co ./lab  # this will act of file named lab
git co lab    # this will act on branch named lab
</pre>

h2.  detached head

* "http://sitaramc.github.com/concepts/detached-head.html":http://sitaramc.github.com/concepts/detached-head.html

Certain operations will put you in no branch. In this branch which is no branch you can do  your experiment like adding a few commits etc. When you get out of branch then all those  changes are discarded. 

<pre>
git co v0.1.15        # checkout tag v0.1.15
git co master^        # parent of master
git co HEAD~2         # grandparent of current HEAD
git co origin/master  # checkout a remote branch
</pre>

However during the experiment you did something and if you would like to preserve that work then you can checkout a new branch.

<pre>
git co -b algorithm_works
</pre>

h2. checking out a particular file

<pre>
git co experiment -- app.js             # bring app.js from experiment branch to current branch
git co v1.2.3 -- app.js                 # bring app.js from tag v1.2.3
git co origin/master -- app.js          # bring app.js from remote branch master
git co HEAD -- app.js                   # bring app.js from current HEAD
git co HEAD^ -- app.js                  # bring app.js from the version before the most recent commit
</pre>

h2. reset everything or a file

Get rid of all the working and staged changes from the current branch.

<pre>
git reset --hard HEAD # reset --hard is a dangerous operation. If mistakenly you 
                      # did reset --hard HEAD^ then you loose a commit
git co -f             # this is a safer option 
got co app.js         # get rid of local changes in app.js and reset it from current HEAD
git co -f lab         # discard all the changes in the current branch and switch 
                      # to lab branch. this is same as git co -f; git co lab
</pre>


h2. create a branch

<pre>
git co -b lab master^    # create a branch from one commit prior to master branch
git co -b lab SHA1       # create a branch from a particular commit hash
git co -b lab v0.1.27    # create a branch from a tag
git co -b lab            # create a new branch called lab and switch to that branch
git co -b lab origin/lab # pull a remote branch called lab
</pre>

h2. Recovering a deleted file

<pre>
rm app.js              # delete a file
git co app.js          # recover the deleted file

git rm app.js          # git delete a file
git reset HEAD app.js  # recover that file
</pre>

List of files deleted using rm

<pre>
rm *.txt                     # delete all files with extension .txt
git ls-files --deleted (-d)  # get the list of files deleted from index
</pre>
