h1. git checkout

h2. file and branch name is same

Let's say that I have a file called lab and I have a branch called lab. In the following case which operation will be performed.

<pre>
git co lab
</pre>

<pre>
git co -- lab       # this will act on file named lab
git co ./lab        # this will act of file named lab
git co lab          # this will act on branch named lab
</pre>

h2. checking out a particular file

<pre>
git co experiment -- app.js             # bring app.js from experiment branch to current branch
git co v1.2.3 -- app.js                 # bring app.js from tag v1.2.3
git co origin/master -- app.js          # bring app.js from remote branch master
git co HEAD -- app.js                   # bring app.js from current HEAD
git co HEAD^ -- app.js                  # bring app.js from the version before the most recent commit
</pre>

h2. reset everything or reset a file

Get rid of all the working and staged changes from the current branch.

<pre>
git reset --hard HEAD # reset --hard is a dangerous operation. If mistakenly you 
                      # did reset --hard HEAD^ then you loose a commit
git co -f             # this is a safer option 
got co app.js         # get rid of local changes in app.js and reset it from current HEAD
git co -f lab         # discard all the changes in the current branch and switch 
                      # to lab branch. this is same as git co -f; git co lab
</pre>


h2. create a branch

<pre>
git co -b lab master^    # create a branch from one commit prior to master branch
git co -b lab SHA1       # create a branch from a particular commit hash
git co -b lab v0.1.27    # create a branch from a tag
git co -b lab            # create a new branch called lab and switch to that branch
git co -b lab origin/lab # pull a remote branch called lab
</pre>

h2. checking with your changes

You made some changes in the lab  branch and you like your changes. However you would like these changes to be applied to master branch and not to lab branch. Note that you are in lab branch. Following command will checkout master branch and will apply unstaged changes to master.

<pre>
git co -m master
</pre>
