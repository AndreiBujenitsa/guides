
add something to the end of line.
shift a

add something to beginning of line. beginning of line meaning the first non blank character
shift i



# delete lines from 10 to 12. including line numbers 10 and 12. total 3 lines will be deleted
:10,12 delete

inserts above/before
P (capital) 

inserts below/after
p (lower-case) 

insert a line after the current one
o 

insert before the current line
O 



set line numbers in the left margin
:set nu 

remove line numbers from the left margin
:set nonu 

highlight search
:set hlsearch

:set nohlsearch

:set number:set nonumber
:set hlsearch

no highlight search
:set nohlsearch

:set ignorecase 
:set noignorecase 

:set wrap
:set nowrap

get rid of highlighted text after search
:noh 


set a mark called q
mq 

go to mark q
`q 

delete all the lines from the current line upto mark q. be at the current line and 
d`q 

this will yank those lines into register
y`q

list all the marks
:marks 

# marks a–z are local to the file. In other words, you can place a mark a in file one.c and another mark a infiletwo.c.
# These marks are separate and have nothing to do with each other. 
# If you execute a go-to-mark command, such as‘a, you will jump within that file to the given mark. 
# The uppercase marks (A–Z) differ.They are global.They mark not only the location within the file, but also the file itself. 
# You are editing the fileone.c and place the mark A in it. You then go on to edit filetwo.c. 
# When you execute the jump-to-mark-A com- mand (‘A), theVim editor will switch you from filetwo.c to file one.c and 
# position the cursor on the mark. 



search for keyword 'for' . It should not match california. do a word boundary match.
# Beginning (\<) and End (\>) of a Word 
:/\<for\> 

This command searches for the pattern const and then moves to the beginning of 
the second line past the pattern.
:/const/2

# join two lines with space 
shift j


# Suppose you want to make all idiots into managers.  
# g means global change. replace all and not just the very first one
# c means ask for confirmation
# 1 means starting from first line
:1,$s/idiots/managers/gc 

if you want to replace all occurrences in a file then instead of :1,$s just say :%s

# trim all the blank chracters at the end of line
:%s/\s*$//

# see all the mappings
:map

# create a rectangular visual block
ctrl v

# select a line visually and then multiples of it
shift v

# If you've selected a block of text visually, you can delete it all with x or d

# delete a word and type in a new one
cw

# find out number of lines in file and the file name
ctrl g

# find the first character d 
fd

# find the second character d
f2d

# repeat the command
;

# search backward
Fd

# find the first character d but stop one character short of it. called search till
td

# find the first occurrence of character 'd' going backward
shift t d
shift f d

# c{motion}
# d{motion} works same as c{motion}
# The deleted text is copied to the clipboard and can be pasted. 

# delete the rest of line and go into insert mode
c$

# delete word and go into insert mode
cw

# delete upto next r but not including
ctr

# move the cursor forward by a word
w

# move the cursor backward by a word
b

# move cursor to the beginning of line
0

# move cursor to the first non blank character
shift ^

# move cursor to the end of line
$

# delete until :
dt:

# delete until : but also delete :
df:

# visually select everything inside {} copy it and paste it
vi} 
command c
command v

# add a file app/foo.txt
:! touch app/foo.txt

# reset the document to how it was 15 minutes earlier
:earlier 15m

# delete the character before the cursor and get into insert mode
X

# searches forward for the next instance of the identifier under the cursor
shift * 

# search for a term
# n for moving forward
:/ruby

# search for a term
# n for moving backward
:?ruby

# insert a blank line after the current line
o

# insert a blank line before the current line
shift o

# paste above the current line
shift p

# delete two words
2w

# delete upto two,
2t,

# go to next starting of word
w

# go to end of word
e

# move along WORD.  A WORD is a sequence of non-blank characters
# WBE does same thing as wbe but it operates on WORD.
# b,e to move along word. a 'word' is a sequence of all alphanumeric or 
# punctuation signs.W, B, E - moves along WORDS. a 'WORD' is a sequence  
# of any non-blank charactersI love ruby. in this case 'w' will stop at the 
# beginning of r in 'ruby' and also at the dot. W is stop only at r in 'ruby'.

# display information about total line numbers and word counts
ctrl g

# move character f t. after first characters is found ; to repeat the operation in the same line
# FT does it backward

# display all lines containing ruby
:g/ruby 
:g/ruby/p

# delete lines matching ruby
:g/ruby/d

# delete all blank lines
:g/^\s*$/d 

# replaces ruby with rails. g is for global, i is for ignorecase, c is for 
# confirmation. mvim will prompt for confirmation before every replacement
:%s/ruby/rails/gic

# replace what you last searched for with rails
:%s//rails/gic 

# delete three consecutive blank lines
:%s/^\n\{3}// 

# find an empty line
/^\n 

# find three consecutive empty lines. notice the weirdness about only escaping the first curly brace
/^\n\{3}

# search for ruby and set the cursor to the last letter of ruby
/ruby/e

search for ruby and set the cursor to the last letter of ruby 
/ruby/e+1 

search for ruby and set the cursor to the two letters before the start of ruby 
/ruby/s-2 

find ruby and move three cursor down
/ruby/+3 

search for index or show
/index\|show/ - 

highlight all terms and then Search for all occurrences of word under the cursor
* 
highglight all terms and then seach for all occurrences of word under the cursor in the reverse order
# 

Visual select everything inside '  string
vi'y 

Delete the [] region around your cursor including []
da[ 

Delete everything inside "" string and start insert mode
ci"

Reopen the current file, getting rid of any unsaved changes
:e! 

quit insert mode just for the time of one command
Ctrl o 

quit insert mode, go at beginning of line, and go back to insert mode. That is control alphabet o and then zero.
CTRL o 0 

quit insert mode, go at end of line, and go back to insert mode
$CTRL o $ 

Increment a number under the cursor. 99 becomes 100
CTRL-A

Decrement a number under the cursor. 100 becomes 99
CTRL-X

split horizontally
Ctrl w s 

split vertically
Ctrl w v 

Uppercase the current line
gUU 

lowercase the current line
guu 

end of 10th line from where you are
10$ 

moves to the first non blank character
shift ^ 

search the first character 'h' in line 
fh 

find the 5th 'h' in the current line
5fh 

searches to the left
F

:set number

:set nonumber

page up
ctrl u 

page down
ctrl d 

delete the rest of line from the point of cursor
d$ 

delete a word and then go into insert mode
cw

delete the entire line and then go into insert mode
cc 

joins the current line with the next line with a single space
J 

perform the same operation on three lines
3J 

replace first five characters with a
5ra 

how to find the end of a class or method
shift  %

go to the top of the document
gg 

go to the bottom of the document
shift g 

move the current line one row down
ddp 

cut the rest of the line and switch to Insert mode
shift c

move current character one position to the right
xp 

change the case of the letter
~ 

delete from cursor to the end of the word
de 

delete from cursor to the end of the word and all the blank spaces after the word
dw 

delete the current word, from left to right delimiter
bde

delete until next dot
dt. 

yanks text from here to the end of the word
ye (or yE)

copies current word
bye 


:A takes you to the test version of the current class
:A will also bring non test version from test version

:AV will split the source code and test version vertically
